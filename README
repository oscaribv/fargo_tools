#----------------------------------------------------------------#
#     	 	            fargo_tools                          #
#   Written by Barragán O., Rendón F. & Álvarez R. 2015          #
#----------------------------------------------------------------#
#Updated May 7, 2015

*This is a set of tools which allows to work with the outputs of the
 FARGO3D code.
*It uses OPENMP to work with different files with several proccesors.
*A fast manual to use fargo_tools is in the fargo_tools root, which is
 called manual.pdf. It includes how to use t2csv and how to visualize
 the 3D data with paraview.
 Actually, the manual to use extracter is not included. 
 It will appear as an appendix in Barragán O., 2015, Master Thesis.
*It is realeased under the GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007.

#---------------------------------------------------------------#
#		     	sources_f90				#
#---------------------------------------------------------------#

All f90 files are inside the sources_f90. A brief description
of each file is given in the following lines.

#create_names.f90
It contains subroutines to work with the filenames.
It is used by t2csv.f90 and extracter.f90

#input_file.f90
It contains subroutines to read the input files.
It is used by t2csv.f90 and extracter.f90

#trans_coords.f90
Inside this file there are all the subroutines which transform
the binary FARGO3D output files into csv files.
A detailed description of how the coordinates are transformed will
appear in Barragán O. 2015, Master Thesis.
This file is used by t2csv.f90

#t2csv.f90
This file transforms the default binary FARGO3D output files to csv files.
It uses create_names.f90, input_file.f90 and trans_coords.f90

#extracter.f90
This file allows to extract a specific region from the default binary FARGO3D
output files. The output files are also binary files with a lower size.
These files can be transformed to csv format with t2csv.


#---------------------------------------------------------------#
#		     	PARALLELIZATION				#
#---------------------------------------------------------------#

For high resolution simulations, there are millions of points which need to be 
transformed by the subroutines described previously. The process can take several 
minutes to work with just a file. For runs with hundred of outputs, this can take
some days of data transformation. In order to avoid that, such subroutines  
were parallelized using OPENMP to run in several CPU's at the same time. 

The parallelization has not the purpouse of transforming a file using multiple cores.
Its main aim is to manipulate multiple files at the same time,
each file with a different CPU. The parallelization is worthless if transformation is 
just to one file. But if the number of files to be transformed is greater than one, 
the paralellization will be effective. This parallelization allows a maximum speed up of 
the order of N in some cases, where N is the number of computer cores.
	
#---------------------------------------------------------------#
#		     	ACKNOWLEDGEMENTS			#
#---------------------------------------------------------------#

We thank to Dr. Erick Nagel for his support to realize this work and his
time to  read and comment these files.
